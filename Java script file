import { LightningElement, track, wire } from 'lwc';
import { getPicklistValues } from 'lightning/uiObjectInfoApi';
import { getObjectInfo } from 'lightning/uiObjectInfoApi';
import Salesarea from '@salesforce/schema/Account.Sales_Area__c';
import Accounts from '@salesforce/schema/Account';
import keyaccount from '@salesforce/apex/KeyAccountquery.KeyAccountlist';


const columns = [
    
    { label: 'Opportunity Name', fieldName : 'opportunityName',initialWidth: 200},
    { label: 'Region', fieldName: 'opportunityRegion',initialWidth: 90},
    { label: 'Account Name', fieldName: 'AccountName',initialWidth: 200},
    { label: 'Inspire Sales Area', fieldName: 'InspireSalesArea',initialWidth: 130}, 
    { label: 'Estimated Quantity', fieldName: 'TotalEstimatedQuantity',initialWidth: 150},
    { label: 'Appropriated Quantity', fieldName: 'AppropriatedQuantity',initialWidth: 170},
    { label: 'Sales Area', fieldName: 'SalesArea',initialWidth: 100},
    
]

export default class KeyAccountSalesLWC extends LightningElement {

    get options() {
        return [
            { label: 'Strategic Account', value: 'Strategic Account'},
            { label: 'National Key Account', value: 'National Key Account'},
            { label: 'Build +', value: 'Build +'},
            { label: 'Udaan', value: 'Udaan'},
        ];
    }
    get business(){
        return [
            {label: 'Infinity',value: 'Infinity'},
            {label: 'Inspire',value: 'Inspire'},
        ];
    }
@track data =[];
@track columns = columns;
@track error;
@track recordtype;
@track sales;
@track accounttype;
@track fromdate;
@track todate;
datatable = false;
@wire (getObjectInfo,{objectApiName : Accounts})
accountInfo;


@wire(getPicklistValues,
    {
    recordTypeId : '$accountInfo.data.defaultRecordTypeId',
    fieldApiName : Salesarea,
}
)
picvalues;

handlebusinessChange(event){
  this.recordtype = event.target.value;
}
handlesalesareaChange(event){
    this.sales = event.target.value;
}
handleaccounttypeChange(event){
  this.accounttype = event.target.value;
}
fromDateChange(event){
    this.fromdate = event.target.value;
}
toDateChange(event){
    this.todate = event.target.value;
}
submit(){
    keyaccount({recordtype:this.recordtype,acctype:this.accounttype,sales:this.sales,fdate:this.fromdate,tdate:this.todate})
  .then(result=>{
        console.log('data======>'+result);
        
        this.data = result;
        this.error = undefined;
        this.datatable = true;
       
        if(this.data == null || this.data == ''){
            this.error = 'No Records Found';
            this.datatable = false;
        }
 
    })
    .catch(error=>{
        this.error = error.body.message;
        this.datas = undefined;
    })

}

exportData(){
    let rowEnd = '\n';
        let csvString = '';
        // this set elminates the duplicates if have any duplicate keys
        let rowData = new Set();

        // getting keys from data
        this.data.forEach(function (record) {
            Object.keys(record).forEach(function (key) {
                rowData.add(key);
            });
        });

        // Array.from() method returns an Array object from any object with a length property or an iterable object.
        rowData = Array.from(rowData);
        
        // splitting using ','
        csvString += rowData.join(',');
        csvString += rowEnd;

        // main for loop to get the data based on key value
        for(let i=0; i < this.data.length; i++){
            let colValue = 0;

            // validating keys in data
            for(let key in rowData) {
                if(rowData.hasOwnProperty(key)) {
                    // Key value 
                    // Ex: Id, Name
                    let rowKey = rowData[key];
                    // add , after every value except the first.
                    if(colValue > 0){
                        csvString += ',';
                    }
                    // If the column is undefined, it as blank in the CSV file.
                    let value = this.data[i][rowKey] === undefined ? '' : this.data[i][rowKey];
                    csvString += '"'+ value +'"';
                    colValue++;
                }
            }
            csvString += rowEnd;
        }

        // Creating anchor element to download
        let downloadElement = document.createElement('a');

        // This  encodeURI encodes special characters, except: , / ? : @ & = + $ # (Use encodeURIComponent() to encode these characters).
        downloadElement.href = 'data:text/csv;charset=utf-8,' + encodeURI(csvString);
        downloadElement.target = '_self';
        // CSV File Name
        downloadElement.download = 'Key Account Sales.csv';
        // below statement is required if you are using firefox browser
        document.body.appendChild(downloadElement);
        // click() Javascript function to download CSV file
        downloadElement.click(); 
    }
}
